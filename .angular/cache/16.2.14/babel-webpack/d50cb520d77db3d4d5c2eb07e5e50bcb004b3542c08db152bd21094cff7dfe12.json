{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/tooltip\";\nfunction CreateAccountComponent_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-error\");\n  }\n}\nfunction CreateAccountComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-error\");\n  }\n}\nfunction CreateAccountComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-error\");\n  }\n}\nfunction CreateAccountComponent_h3_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\");\n    i0.ɵɵtext(1, \"Passwords do not match!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\nexport let CreateAccountComponent = /*#__PURE__*/(() => {\n  class CreateAccountComponent {\n    constructor(userService, router) {\n      this.userService = userService;\n      this.router = router;\n      this.username = \"\";\n      this.password = \"\";\n      this.usernameFormControl = new FormControl('', [Validators.required]);\n      this.password1FormControl = new FormControl('', [Validators.required]);\n      this.password2FormControl = new FormControl('', [Validators.required]);\n      this.matcher = new MyErrorStateMatcher();\n      this.passwordsMatch = true;\n    }\n    createAccount(username, password) {\n      this.username = username;\n      this.password = password;\n      this.userService.createUser({\n        username: this.username,\n        password: this.password\n      }).subscribe({\n        next: data => {\n          this.router.navigate(['/home']);\n        },\n        error: error => {\n          switch (error.status) {\n            case 406:\n              {\n                alert(\"Username already exist!\");\n                break;\n              }\n          }\n        }\n      });\n    }\n    static #_ = this.ɵfac = function CreateAccountComponent_Factory(t) {\n      return new (t || CreateAccountComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CreateAccountComponent,\n      selectors: [[\"app-create-account\"]],\n      decls: 23,\n      vars: 12,\n      consts: [[1, \"login\"], [1, \"full-width\"], [\"matInput\", \"\", 3, \"formControl\", \"errorStateMatcher\"], [\"username\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", 3, \"formControl\", \"errorStateMatcher\"], [\"password1\", \"\"], [\"password2\", \"\"], [\"matTooltip\", \"Passwords cannot be empty!\", 3, \"matTooltipDisabled\"], [\"mat-stroked-button\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"]],\n      template: function CreateAccountComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r7 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\n          i0.ɵɵtext(3, \"Username\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 2, 3);\n          i0.ɵɵtemplate(6, CreateAccountComponent_mat_error_6_Template, 1, 0, \"mat-error\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"mat-form-field\", 1)(8, \"mat-label\");\n          i0.ɵɵtext(9, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 5, 6);\n          i0.ɵɵtemplate(12, CreateAccountComponent_mat_error_12_Template, 1, 0, \"mat-error\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"mat-form-field\", 1)(14, \"mat-label\");\n          i0.ɵɵtext(15, \"Re-Enter Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(16, \"input\", 5, 7);\n          i0.ɵɵtemplate(18, CreateAccountComponent_mat_error_18_Template, 1, 0, \"mat-error\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(19, CreateAccountComponent_h3_19_Template, 2, 0, \"h3\", 4);\n          i0.ɵɵelementStart(20, \"div\", 8)(21, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function CreateAccountComponent_Template_button_click_21_listener() {\n            i0.ɵɵrestoreView(_r7);\n            const _r0 = i0.ɵɵreference(5);\n            const _r2 = i0.ɵɵreference(11);\n            return i0.ɵɵresetView(ctx.createAccount(_r0.value, _r2.value));\n          });\n          i0.ɵɵtext(22, \" Create Account\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          const _r2 = i0.ɵɵreference(11);\n          const _r4 = i0.ɵɵreference(17);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formControl\", ctx.usernameFormControl)(\"errorStateMatcher\", ctx.matcher);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.usernameFormControl.hasError(\"required\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formControl\", ctx.password1FormControl)(\"errorStateMatcher\", ctx.matcher);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.password1FormControl.hasError(\"required\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formControl\", ctx.password2FormControl)(\"errorStateMatcher\", ctx.matcher);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.password2FormControl.hasError(\"required\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", _r2.value != _r4.value);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"matTooltipDisabled\", !(_r2.value == \"\" || _r4.value == \"\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", !(_r2 != _r4 && _r2.value != \"\" && _r4.value != \"\"));\n        }\n      },\n      dependencies: [i3.NgIf, i4.MatButton, i5.MatInput, i6.MatFormField, i6.MatLabel, i6.MatError, i7.ɵNgNoValidate, i7.DefaultValueAccessor, i7.NgControlStatus, i7.NgControlStatusGroup, i7.NgForm, i7.FormControlDirective, i8.MatTooltip],\n      styles: [\".login[_ngcontent-%COMP%]{width:100%;display:flex;justify-content:center;align-items:center;flex-direction:column;height:100%}\"]\n    });\n  }\n  return CreateAccountComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}