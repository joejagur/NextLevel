{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GameService {\n  constructor(http) {\n    this.http = http;\n    this.gameURL = 'http://localhost:8080/games';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  addGame(userInfo, gameInfo) {\n    const url = `${this.userURL}/gameID=${gameInfo.id}`;\n    return this.http.post(url, userInfo, this.httpOptions);\n  }\n  searchGame(title) {\n    if (!title.trim()) {\n      return of([]);\n    }\n    const url = `${this.gameURL}/title=${title}`;\n    return this.http.get(url);\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(error);\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function GameService_Factory(t) {\n    return new (t || GameService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameService,\n    factory: GameService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","of","GameService","constructor","http","gameURL","httpOptions","headers","addGame","userInfo","gameInfo","url","userURL","id","post","searchGame","title","trim","get","handleError","operation","result","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\joegu\\Documents\\QuestLog\\questLog\\src\\app\\services\\game.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, catchError, of } from 'rxjs';\nimport { Games } from '../model/Games';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GameService {\n  private gameURL ='http://localhost:8080/games'\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  addGame(userInfo: User, gameInfo: Games):Observable<User>{\n    const url = `${this.userURL}/gameID=${gameInfo.id}`\n\n    return this.http.post<User>(url, userInfo, this.httpOptions);\n  }\n  \n  searchGame(title:string):Observable<Games[]>{\n    if(!title.trim()){\n      return of([])\n    }\n\n    const url = `${this.gameURL}/title=${title}`\n    return this.http.get<Games[]>(url);\n  }\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error);\n      return of(result as T);\n    };\n  }\n}\n\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAiCC,EAAE,QAAQ,MAAM;;;AAMjD,OAAM,MAAOC,WAAW;EAKtBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALN,KAAAC,OAAO,GAAE,6BAA6B;IAC9C,KAAAC,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAGG;EAEJQ,OAAOA,CAACC,QAAc,EAAEC,QAAe;IACrC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,WAAWF,QAAQ,CAACG,EAAE,EAAE;IAEnD,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAOH,GAAG,EAAEF,QAAQ,EAAE,IAAI,CAACH,WAAW,CAAC;EAC9D;EAEAS,UAAUA,CAACC,KAAY;IACrB,IAAG,CAACA,KAAK,CAACC,IAAI,EAAE,EAAC;MACf,OAAOhB,EAAE,CAAC,EAAE,CAAC;;IAGf,MAAMU,GAAG,GAAG,GAAG,IAAI,CAACN,OAAO,UAAUW,KAAK,EAAE;IAC5C,OAAO,IAAI,CAACZ,IAAI,CAACc,GAAG,CAAUP,GAAG,CAAC;EACpC;EACQQ,WAAWA,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MACnCC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,OAAOrB,EAAE,CAACoB,MAAW,CAAC;IACxB,CAAC;EACH;EAAC,QAAAG,CAAA,G;qBA5BUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}